CREATE OR REPLACE PROCEDURE UPDATE_TOURNAMENT_MATCH(MATCH NUMBER, 
PLAYER1 VARCHAR2, SCORE1 NUMBER, PLAYER2 VARCHAR2, SCORE2 NUMBER)
IS
U_ID1 NUMBER;
U_ID2 NUMBER;
POS1 NUMBER;
POS2 NUMBER;
T_ID NUMBER;
M_LEVEL NUMBER;
WINNER NUMBER;
COUNTER NUMBER;
CAP NUMBER;
PLAYER NUMBER;
OPPONENT NUMBER;
X NUMBER;
MATCHES_LEFT NUMBER;

BEGIN
SELECT USER_ID INTO U_ID1
	FROM USER_TABLE
	WHERE USERNAME = PLAYER1;

	SELECT USER_ID INTO U_ID2
	FROM USER_TABLE
	WHERE USERNAME = PLAYER2;

	IF SCORE1>=SCORE2 THEN
	WINNER := U_ID1;
	POS1 := 1;
	POS2 := 2;
	ELSIF SCORE1<SCORE2 THEN
	WINNER := U_ID2;
	POS2 := 1;
	POS1 :=2;
	END IF;

	SELECT TOURNAMENT_ID INTO T_ID
	FROM TOURNAMENT_MATCH_TABLE
	WHERE MATCH_ID = MATCH;

	UPDATE TOURNAMENT_PARTICIPANTS_TABLE
	SET POSITION = POSITION/2
	WHERE PLAYER_ID = WINNER
	AND TOURNAMENT_ID = T_ID;

	UPDATE MATCH_PARTICIPANTS_TABLE
	SET SCORE = SCORE1, POSITION = POS1
	WHERE MATCH_ID = MATCH AND PLAYER_ID = U_ID1;
	UPDATE MATCH_PARTICIPANTS_TABLE
	SET SCORE = SCORE2, POSITION = POS2
	WHERE MATCH_ID = MATCH AND PLAYER_ID = U_ID2;
	

	SELECT MATCH_LEVEL INTO M_LEVEL
	FROM TOURNAMENT_MATCH_TABLE
	WHERE MATCH_ID = MATCH;

	SELECT CAPACITY INTO CAP
FROM TOURNAMENT_TABLE
WHERE TOURNAMENT_ID = T_ID;

	SELECT COUNT(DISTINCT MATCH_ID) INTO MATCHES_LEFT
	FROM MATCH_PARTICIPANTS_TABLE
	WHERE SCORE IS NULL
AND  MATCH_ID IN (SELECT MATCH_ID
FROM TOURNAMENT_MATCH_TABLE
WHERE TOURNAMENT_ID = T_ID);

IF MATCHES_LEFT = 0 THEN

COUNTER :=0;
PLAYER := -1;
OPPONENT := -1;
WHILE PLAYER <>0 AND OPPONENT <>0
LOOP
SELECT NVL(MIN(PLAYER_ID),0) INTO PLAYER
FROM MATCH_PARTICIPANTS_TABLE T1
JOIN TOURNAMENT_MATCH_TABLE T2
ON (T1.MATCH_ID = T2.MATCH_ID)
WHERE POSITION = 1
AND TOURNAMENT_ID = T_ID
AND T2.MATCH_LEVEL = M_LEVEL
AND T1.PLAYER_ID NOT IN (SELECT PLAYER_ID
												FROM MATCH_PARTICIPANTS_TABLE T11
												JOIN TOURNAMENT_MATCH_TABLE T12
												ON (T11.MATCH_ID = T12.MATCH_ID  AND T12.TOURNAMENT_ID=T_ID)
												WHERE T12.MATCH_LEVEL >M_LEVEL);


SELECT NVL(MIN(PLAYER_ID),0) INTO OPPONENT
FROM MATCH_PARTICIPANTS_TABLE T1
JOIN TOURNAMENT_MATCH_TABLE T2
ON (T1.MATCH_ID = T2.MATCH_ID)
WHERE POSITION = 1
AND PLAYER_ID <> PLAYER
AND TOURNAMENT_ID = T_ID
AND T2.MATCH_LEVEL = M_LEVEL
AND T1.PLAYER_ID NOT IN (SELECT PLAYER_ID
												FROM MATCH_PARTICIPANTS_TABLE T11
												JOIN TOURNAMENT_MATCH_TABLE T12
												ON (T11.MATCH_ID = T12.MATCH_ID AND T12.TOURNAMENT_ID=T_ID)
												WHERE T12.MATCH_LEVEL >M_LEVEL);

IF PLAYER>0 AND OPPONENT>0 THEN
X:= INSERT_MATCH_BY_ID(PLAYER, OPPONENT);
INSERT INTO TOURNAMENT_MATCH_TABLE VALUES(X, T_ID, M_LEVEL+1);
END IF;

END LOOP;
	END IF;

SELECT COUNT(DISTINCT MATCH_ID) INTO MATCHES_LEFT
	FROM MATCH_PARTICIPANTS_TABLE
	WHERE SCORE IS NULL
AND  MATCH_ID IN (SELECT MATCH_ID
FROM TOURNAMENT_MATCH_TABLE
WHERE TOURNAMENT_ID = T_ID);

IF MATCHES_LEFT = 0 THEN
	UPDATE TOURNAMENT_TABLE
	SET END_DATE = SYSDATE
	WHERE TOURNAMENT_ID = T_ID;


--update xp
	UPDATE PLAYER_TABLE
	SET TOTAL_XP = TOTAL_XP+CAP*100
	WHERE PLAYER_ID = (SELECT PLAYER_ID
			FROM TOURNAMENT_PARTICIPANTS_TABLE
			WHERE POSITION = 1 AND TOURNAMENT_ID=T_ID);

UPDATE PLAYER_TABLE
	SET TOTAL_XP = TOTAL_XP+CAP*70
	WHERE PLAYER_ID = (SELECT PLAYER_ID
			FROM TOURNAMENT_PARTICIPANTS_TABLE
			WHERE POSITION = 2 AND TOURNAMENT_ID=T_ID);
	


END IF;


	EXCEPTION
	WHEN OTHERS THEN
	ROLLBACK;

END;
/


CREATE OR REPLACE FUNCTION INSERT_TOURNAMENT_PARTICIPANT(ID NUMBER, PLAYER VARCHAR2)
RETURN NUMBER
IS
U_ID NUMBER;
CAP NUMBER;
CNT NUMBER;
BEGIN
	SELECT CAPACITY INTO CAP
	FROM TOURNAMENT_TABLE
	WHERE TOURNAMENT_ID = ID;

	SELECT COUNT(PLAYER_ID) INTO CNT
	FROM TOURNAMENT_PARTICIPANTS_TABLE
	WHERE TOURNAMENT_ID = ID;

	IF CNT=CAP THEN
	RETURN 0;
	END IF;
	
	INSERT INTO TOURNAMENT_PARTICIPANTS_TABLE VALUES(ID, 
(SELECT USER_ID
FROM USER_TABLE
WHERE USERNAME = PLAYER),
NULL);

SELECT COUNT(PLAYER_ID) INTO CNT
	FROM TOURNAMENT_PARTICIPANTS_TABLE
	WHERE TOURNAMENT_ID = ID;

	IF CNT=CAP THEN
	INITIALIZE_TOURNAMENT(ID);
	END IF;
	RETURN 1;

END;
/



CREATE OR REPLACE PROCEDURE INITIALIZE_TOURNAMENT(ID NUMBER)
IS
PLAYER NUMBER;
OPPONENT NUMBER;
X NUMBER;
BEGIN
UPDATE TOURNAMENT_PARTICIPANTS_TABLE
SET POSITION = (SELECT CAPACITY FROM TOURNAMENT_TABLE WHERE TOURNAMENT_ID = ID)
WHERE TOURNAMENT_ID = ID;

PLAYER := -1;
OPPONENT := -1;
WHILE PLAYER <>0 AND OPPONENT <>0
LOOP
SELECT NVL(MIN(PLAYER_ID),0) INTO PLAYER
FROM TOURNAMENT_PARTICIPANTS_TABLE
WHERE TOURNAMENT_ID = ID
AND PLAYER_ID NOT IN (SELECT PLAYER_ID
												FROM MATCH_PARTICIPANTS_TABLE T11
												JOIN TOURNAMENT_MATCH_TABLE T12
												ON (T11.MATCH_ID = T12.MATCH_ID AND T12.TOURNAMENT_ID=ID) );


SELECT NVL(MIN(PLAYER_ID),0) INTO OPPONENT
FROM TOURNAMENT_PARTICIPANTS_TABLE
WHERE TOURNAMENT_ID = ID
AND PLAYER_ID <> PLAYER
AND PLAYER_ID NOT IN (SELECT PLAYER_ID
												FROM MATCH_PARTICIPANTS_TABLE T11
												JOIN TOURNAMENT_MATCH_TABLE T12
												ON (T11.MATCH_ID = T12.MATCH_ID AND T12.TOURNAMENT_ID = ID) );

IF PLAYER>0 AND OPPONENT>0 THEN
X:= INSERT_MATCH_BY_ID(PLAYER, OPPONENT);
INSERT INTO TOURNAMENT_MATCH_TABLE VALUES(X, ID, 1);
END IF;

END LOOP;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;

END;
/



CREATE OR REPLACE FUNCTION INSERT_MATCH_BY_ID(PLAYER1 NUMBER, PLAYER2 NUMBER)
RETURN NUMBER
IS
USERNAME1 VARCHAR2(100);
USERNAME2 VARCHAR2(100);
BEGIN
SELECT USERNAME INTO USERNAME1
FROM USER_TABLE
WHERE USER_ID = PLAYER1;
SELECT USERNAME INTO USERNAME2
FROM USER_TABLE
WHERE USER_ID = PLAYER2;

RETURN INSERT_MATCH(USERNAME1, USERNAME2);
END;
/