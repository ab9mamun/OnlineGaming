--USER---------
CREATE OR REPLACE FUNCTION INSERT_USER(USER_NAME VARCHAR2, FULL_NAME VARCHAR2, PASS VARCHAR2, EMAIL VARCHAR2,
B_DATE VARCHAR2, AREA VARCHAR2)
RETURN NUMBER IS
latest NUMBER;
BEGIN
	SELECT NVL(MAX(user_id),0) INTO latest
	FROM User_Table;

	INSERT INTO USER_TABLE VALUES(latest+1, USER_NAME, FULL_NAME, PASS, EMAIL, SYSDATE, B_DATE, AREA, 'active');
	INSERT INTO PLAYER_TABLE(PLAYER_ID) VALUES(LATEST+1);
	RETURN latest+1;
EXCEPTION
	WHEN OTHERS THEN
	RETURN 0;
END;
/

--=============================================================================================
--forumpost
CREATE OR REPLACE FUNCTION INSERT_FORUM_POST(TITLE VARCHAR2, CONTENT VARCHAR2, SECTION VARCHAR2, POSTED_BY VARCHAR2)
RETURN NUMBER IS
latest NUMBER;
sec_id NUMBER;
u_id NUMBER;
BEGIN
	SELECT NVL(MAX(post_id),0) INTO latest
	FROM FORUM_POST_TABLE;

	SELECT SECTION_ID INTO sec_id
	FROM SECTION_TABLE
	WHERE SECTION_NAME = SECTION;
	
	SELECT USER_ID INTO u_id
	FROM USER_TABLE
	WHERE POSTED_BY = USERNAME;

	INSERT INTO FORUM_POST_TABLE VALUES(latest+1, TITLE, CONTENT, SYSDATE, SEC_ID, U_ID);
	RETURN latest+1;
EXCEPTION
	WHEN OTHERS THEN
	RETURN 0;
END;
/
----------------------------------

--forumREPLY
CREATE OR REPLACE FUNCTION INSERT_FORUM_REPLY(POST NUMBER, REPLYD_BY VARCHAR2, CONTENT VARCHAR2)
RETURN NUMBER IS
latest NUMBER;
U_ID NUMBER;
BEGIN
	SELECT NVL(MAX(reply_id),0) INTO latest
	FROM FORUM_REPLY_TABLE
	WHERE post_id = post;

	SELECT USER_ID INTO U_ID
	FROM USER_TABLE
	WHERE USERNAME = REPLYD_BY;

	INSERT INTO FORUM_REPLY_TABLE VALUES(POST, latest+1, U_ID, CONTENT, SYSDATE);
	RETURN latest+1;
EXCEPTION
	WHEN OTHERS THEN
	RETURN 0;
END;
/

--match

CREATE OR REPLACE FUNCTION INSERT_MATCH(P1 VARCHAR2, P2 VARCHAR2)
RETURN NUMBER IS
latest NUMBER;
BEGIN
	SELECT NVL(MAX(match_id), 0) INTO latest
	FROM Match_Table;

	INSERT INTO MATCH_TABLE VALUES(LATEST+1, SYSDATE);

	INSERT_MATCH_PARTICIPANT(LATEST+1, P1);
	
	INSERT_MATCH_PARTICIPANT(LATEST+1, P2);
		
	RETURN latest+1;

EXCEPTION
	WHEN OTHERS THEN
	ROLLBACK;
	RETURN 0;
END;
/




--tournament

CREATE OR REPLACE FUNCTION INSERT_TOURNAMENT(NAME VARCHAR2, STARTDATE VARCHAR2, CAP NUMBER)
RETURN NUMBER IS
latest NUMBER;
BEGIN
	SELECT NVL(MAX(tournament_id), 0) INTO latest
	FROM Tournament_Table;

	INSERT INTO TOURNAMENT_TABLE VALUES(LATEST+1,NAME, STARTDATE, NULL, CAP);
		
	RETURN latest+1;

EXCEPTION
	WHEN OTHERS THEN
	RETURN 0;
END;
/

--section
CREATE OR REPLACE FUNCTION INSERT_SECTION(NAME VARCHAR2)
RETURN NUMBER IS
latest NUMBER;
BEGIN
	SELECT NVL(MAX(section_id), 0) INTO latest
	FROM Section_Table;

	INSERT INTO SECTION_TABLE VALUES(LATEST+1, NAME);
		
	RETURN latest+1;

EXCEPTION
	WHEN OTHERS THEN
	RETURN 0;
END;
/
--achievement
CREATE OR REPLACE FUNCTION INSERT_ACHIEVEMENT(GOAL VARCHAR2, REWARD NUMBER, DESCRIPTION VARCHAR2)
RETURN NUMBER IS
latest NUMBER;
BEGIN
	SELECT NVL(MAX(achievement_id), 0) INTO latest
	FROM Achievement_Table;

	INSERT INTO ACHIEVEMENT_TABLE VALUES(LATEST+1, GOAL, REWARD, DESCRIPTION);
		
	RETURN latest+1;

EXCEPTION
	WHEN OTHERS THEN
	RETURN 0;
END;
/

---MATCH_PARTICIPANTS
CREATE OR REPLACE PROCEDURE INSERT_MATCH_PARTICIPANT(MATCH VARCHAR2, PLAYER VARCHAR2)
IS
latest NUMBER;
U_ID NUMBER;
BEGIN
	SELECT USER_ID INTO U_ID
	FROM USER_TABLE
	WHERE USERNAME = PLAYER;

	INSERT INTO MATCH_PARTICIPANTS_TABLE(MATCH_ID, PLAYER_ID,SCORE)  VALUES(MATCH, U_ID, NULL);

END;
/


CREATE OR REPLACE PROCEDURE UPDATE_MATCH(MATCH NUMBER, PLAYER1 VARCHAR2, SCORE1 NUMBER, PLAYER2 VARCHAR2, SCORE2 NUMBER)
IS
U_ID1 NUMBER;
U_ID2 NUMBER;
POS1 NUMBER;
POS2 NUMBER;
BEGIN
	SELECT USER_ID INTO U_ID1
	FROM USER_TABLE
	WHERE USERNAME = PLAYER1;

	SELECT USER_ID INTO U_ID2
	FROM USER_TABLE
	WHERE USERNAME = PLAYER2;


	POS1 := 2;
	POS2 := 2;

	IF SCORE1>SCORE2 THEN
	POS1 := 1;
	ELSIF SCORE1<SCORE2 THEN
	POS2 := 1;
	END IF;
	
	UPDATE MATCH_PARTICIPANTS_TABLE
	SET SCORE = SCORE1, POSITION = POS1
	WHERE MATCH_ID = MATCH AND PLAYER_ID = U_ID1;

	UPDATE MATCH_PARTICIPANTS_TABLE
	SET SCORE = SCORE2, POSITION = POS2
	WHERE MATCH_ID = MATCH AND PLAYER_ID = U_ID2;


END;
/


CREATE OR REPLACE TRIGGER MATCH_PARTICIPANT_TRIGGER
BEFORE INSERT ON MATCH_PARTICIPANTS_TABLE
FOR EACH ROW
DECLARE
cnt NUMBER;
BEGIN
	SELECT COUNT(*) INTO cnt
	FROM MATCH_PARTICIPANTS_TABLE
	WHERE MATCH_ID = :NEW.MATCH_ID;
	
	IF cnt >= 2 THEN 
	
	:NEW.MATCH_ID := NULL;
	END IF;
END;
/

---TOURNAMENT_PARTICIPANTS
CREATE OR REPLACE TRIGGER TOURNAMENT_PARTICIPANT_TRIGGER
BEFORE INSERT ON TOURNAMENT_PARTICIPANTS_TABLE
FOR EACH ROW
DECLARE
cnt NUMBER;
cap NUMBER;
BEGIN
	SELECT COUNT(*) INTO cnt
	FROM TOURNAMENT_PARTICIPANTS_TABLE
	WHERE TOURNAMENT_ID = :NEW.TOURNAMENT_ID;
	
	SELECT CAPACITY INTO cap
	FROM TOURNAMENT_TABLE
	WHERE TOURNAMENT_ID = :NEW.TOURNAMENT_ID;
	
	IF cnt >= cap THEN 
	
	:NEW.TOURNAMENT_ID := NULL;
	END IF;
END;
/










--==================================================
CREATE OR REPLACE PROCEDURE FLAG_POST(POST NUMBER, REPORTER VARCHAR2)
IS
U_ID NUMBER;
BEGIN
	SELECT USER_ID INTO U_ID
	FROM USER_TABLE
	WHERE USERNAME = REPORTER;
		
	INSERT INTO POST_FLAG_TABLE VALUES(POST, U_ID);

END;
/

CREATE OR REPLACE PROCEDURE FLAG_REPLY(POST NUMBER, REPLY NUMBER, REPORTER VARCHAR2)
IS
U_ID NUMBER;
BEGIN
	SELECT USER_ID INTO U_ID
	FROM USER_TABLE
	WHERE USERNAME = REPORTER;
		
	INSERT INTO REPLY_FLAG_TABLE VALUES(POST,REPLY, U_ID);

END;
/